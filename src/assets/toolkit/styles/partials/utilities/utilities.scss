// Clearfix

.clearfix             { @include clearfix; }

// Text

.font-regular         { @include font-regular; }
.font-bold            { @include font-bold; }

.text-left            { text-align: left; }
.text-right           { text-align: right; }
.text-center          { text-align: center; }

.text-uppercase       { text-transform: uppercase; }
.text-italic          { font-style: italic; }

.text-dark            { color: $c-text-dark; }
.text-light           { color: $c-text-light; }

.line-height-smaller  { line-height: 1.2; }
.line-height-bigger   { line-height: 2; }

.word-break-all       { word-break: break-all; }

.white-space-nowrap   { white-space: nowrap; }
.white-space-normal   { white-space: normal; }

// Vertical Align

.valign-top           { vertical-align: top; }
.valign-bottom        { vertical-align: bottom; }
.valign-middle        { vertical-align: middle; }

// Layout

.l-block              { display: block; }
.l-inline-block       { display: inline-block; }

.l-relative           { position: relative; }
.l-absolute           { position: absolute; }
.l-fixed              { position: fixed; }

.l-full               { width: 100%; }

// Table

.table                { display: table; }
.table-layout-fixed   { table-layout: fixed; }
.thead                { display: table-header-group; }
.tbody                { display: table-row-group; }
.tr                   { display: table-row; }
.td                   { display: table-cell; }
.th                   { display: table-cell; }

// Hide

.hidden               { display: none !important; }

.overflow-hidden      { overflow: hidden; }

// Float

.float-left           { float: left; }
.float-right          { float: right; }
.float-none           { float: none; }

// Margin & Padding

.no-margin            { margin: 0 !important; }
.no-padding           { padding: 0 !important; }

// Border

.border               { border: 1px solid $c-border; }
.border-top           { border-top: 1px solid $c-border; }
.border-bottom        { border-bottom: 1px solid $c-border; }
.border-left          { border-left: 1px solid $c-border; }
.border-right         { border-right: 1px solid $c-border; }

.border-x {
  border-left: 1px solid $c-border;
  border-right: 1px solid $c-border;
}

.border-y {
  border-top: 1px solid $c-border;
  border-bottom: 1px solid $c-border;
}

// Background Colors

@mixin util-bg($bg, $color) {
  background-color: $bg;
  color: $color;
}

.bg-primary       { @include util-bg($c-primary, $c-text-on-primary); }
.bg-secondary     { @include util-bg($c-secondary, $c-text-on-secondary); }

// Text Sizes

@mixin crate-font-sizes {

  // This mixin generates utility classes used for text size.

  // Suffixes: tiny, small, default, big, xbig
  // To add a text size, use prefix 'font-size-' followed by the suffix as a class.
  // If you wish to add the font-size in rem instad of em, add '-rem' at the end of the class name.
  // Example of class construction: text-tiny, text-small etc.

  $text-sizes: (
    tiny: 0.75,
    small: 0.875,
    default: 1,
    big: 1.125,
    xbig: 1.375,
  );

  @each $suffix in map-keys($text-sizes) {
    $size: map-get($text-sizes, $suffix);

    .font-size-#{$suffix} {
      font-size: #{$size}em;
    }

    .font-size-#{$suffix}-rem {
      font-size: #{$size}rem;
    }
  }
}
@include crate-font-sizes;

// Spacing Utility Classes

@mixin create-spacing-classes {

  // This mixin generates utility classes used for spacing.

  // Suffixes: none (all), t (top), b (bottom), l (left), r (right), x (left + right), y (top + bottom).
  // To add sizes, add a new key/value (size suffix/gutter) to the $spacing-sizes map.
  // To add propersies, add a news key/value (property suffix/CSS property) to the $spacing-properties map.
  // Example of class construction: m-b-half, m-b, m-b-double etc.

  // To use an unsuffixed classname, set key to 'none'
  $spacing-sizes: (
    none: $gutter,
    mini: ($gutter-half / 2),
    half: $gutter-half,
    double: $gutter-double,
    triple: $gutter-triple
  ) !default;

  $spacing-properties: (
    m: margin,
    p: padding
  ) !default;

  @each $suffix in map-keys($spacing-sizes) {
    $size: map-get($spacing-sizes, $suffix);

    // Class name suffix
    @if $suffix == none {
      $suffix: '';
    } @else {
      $suffix: '-#{$suffix}';
    }

    @each $preperty-name in map-keys($spacing-properties) {
      $property:   map-get($spacing-properties, $preperty-name);

      // Generate spacing classes
      // sass-lint:disable-block one-declaration-per-line
      .#{$preperty-name}#{$suffix} { #{$property}: $size; }
      .#{$preperty-name}-t#{$suffix} { #{$property}-top: $size; }
      .#{$preperty-name}-b#{$suffix} { #{$property}-bottom: $size; }
      .#{$preperty-name}-l#{$suffix} { #{$property}-left: $size; }
      .#{$preperty-name}-r#{$suffix} { #{$property}-right: $size; }
      .#{$preperty-name}-x#{$suffix} { #{$property}-left: $size; #{$property}-right: $size; }
      .#{$preperty-name}-y#{$suffix} { #{$property}-top: $size; #{$property}-bottom: $size; }
    }
  }
}
@include create-spacing-classes;
